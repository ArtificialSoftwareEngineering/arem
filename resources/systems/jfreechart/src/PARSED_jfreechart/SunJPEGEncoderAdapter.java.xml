<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jfreechart\src\org\jfree\chart\encoders\SunJPEGEncoderAdapter.java">
    <comment type="block">/* ===========================================================
        * JFreeChart : a free chart library for the Java(tm) platform
        * ===========================================================
        *
        * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
        *
        * Project Info: http://www.jfree.org/jfreechart/index.html
        *
        * This library is free software; you can redistribute it and/or modify it
        * under the terms of the GNU Lesser General Public License as published by
        * the Free Software Foundation; either version 2.1 of the License, or
        * (at your option) any later version.
        *
        * This library is distributed in the hope that it will be useful, but
        * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        * License for more details.
        *
        * You should have received a copy of the GNU Lesser General Public
        * License along with this library; if not, write to the Free Software
        * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        * USA.
        *
        * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
        * in the United States and other countries.]
        *
        * --------------------------
        * SunJPEGEncoderAdapter.java
        * --------------------------
        * (C) Copyright 2004-2007, by Richard Atkinson and Contributors.
        *
        * Original Author: Richard Atkinson;
        * Contributor(s): David Gilbert (for Object Refinery Limited);
        *
        * Changes
        * -------
        * 01-Aug-2004 : Initial version (RA);
        * 01-Nov-2005 : To remove the dependency on non-supported APIs, use ImageIO
        * instead of com.sun.image.codec.jpeg.JPEGImageEncoder - this
        * adapter will only be available on JDK 1.4 or later (DG);
        * ------------- JFREECHART 1.0.x ---------------------------------------------
        * 20-Jul-2006 : Pass quality setting to ImageIO. Also increased default
        * value to 0.95 (DG);
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.
            <name>encoders</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>BufferedImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ByteArrayOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Iterator</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>imageio</name>.
            <name>IIOImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>imageio</name>.
            <name>ImageIO</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>imageio</name>.
            <name>ImageWriteParam</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>imageio</name>.
            <name>ImageWriter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>imageio</name>.<name>stream</name>.
            <name>ImageOutputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Adapter class for the Sun JPEG Encoder. The {@link ImageEncoderFactory}
        * will only return a reference to this class by default if the library has
        * been compiled under a JDK 1.4+ and is being run using a JRE 1.4+.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>SunJPEGEncoderAdapter</name>
        <super>
            <implements>implements
                <name>ImageEncoder</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** The quality setting (in the range 0.0f to 1.0f). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>float</name>
                    </type>
                    <name>quality</name> =
                    <init>
                        <expr>0.95f</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new &lt;code&gt;SunJPEGEncoderAdapter&lt;/code&gt; instance.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>SunJPEGEncoderAdapter</name>
                <parameter_list>()</parameter_list>
                <block>{
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the quality of the image encoding, which is a number in the
                * range 0.0f to 1.0f (higher values give better quality output, but larger
                * file sizes). The default value is 0.95f.
                *
                * @return A float representing the quality, in the range 0.0f to 1.0f.
                *
                * @see #setQuality(float)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>getQuality</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>quality</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set the quality of the image encoding.
                *
                * @param quality A float representing the quality (in the range 0.0f to
                * 1.0f).
                *
                * @see #getQuality()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setQuality</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>quality</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>quality</name>
                                &lt; 0.0f || <name>quality</name> &gt; 1.0f
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"The 'quality' must be in the range 0.0f to 1.0f"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>quality</name>
                            </name>
                            =
                            <name>quality</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns &lt;code&gt;false&lt;/code&gt; always, indicating that this encoder does not
                * encode alpha transparency.
                *
                * @return &lt;code&gt;false&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEncodingAlpha</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return <expr>false</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Set whether the encoder should encode alpha transparency (this is not
                * supported for JPEG, so this method does nothing).
                *
                * @param encodingAlpha ignored.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEncodingAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>encodingAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">// No op</comment>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encodes an image in JPEG format.
                *
                * @param bufferedImage the image to be encoded (&lt;code&gt;null&lt;/code&gt; not
                * permitted).
                *
                * @return The byte[] that is the encoded image.
                *
                * @throws IOException if there is an I/O problem.
                * @throws NullPointerException if &lt;code&gt;bufferedImage&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>bufferedImage</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ByteArrayOutputStream</name>
                            </type>
                            <name>outputStream</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ByteArrayOutputStream</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>encode</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>bufferedImage</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>outputStream</name>.
                                    <name>toByteArray</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encodes an image in JPEG format and writes it to an output stream.
                *
                * @param bufferedImage the image to be encoded (&lt;code&gt;null&lt;/code&gt; not
                * permitted).
                * @param outputStream the OutputStream to write the encoded image to
                * (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @throws IOException if there is an I/O problem.
                * @throws NullPointerException if &lt;code&gt;bufferedImage&lt;/code&gt; is
                * &lt;code&gt;null&lt;/code&gt;.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>bufferedImage</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>bufferedImage</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'image' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>outputStream</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'outputStream' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Iterator</name>
                            </type>
                            <name>iterator</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageIO</name>.
                                            <name>getImageWritersByFormatName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"jpeg"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageWriter</name>
                            </type>
                            <name>writer</name> =
                            <init>
                                <expr>(<name>ImageWriter</name>)
                                    <call>
                                        <name><name>iterator</name>.
                                            <name>next</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageWriteParam</name>
                            </type>
                            <name>p</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>writer</name>.
                                            <name>getDefaultWriteParam</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>setCompressionMode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>ImageWriteParam</name>.
                                                <name>MODE_EXPLICIT</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>p</name>.
                                    <name>setCompressionQuality</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>quality</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageOutputStream</name>
                            </type>
                            <name>ios</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageIO</name>.
                                            <name>createImageOutputStream</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>outputStream</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>writer</name>.
                                    <name>setOutput</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>ios</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>writer</name>.
                                    <name>write</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>IIOImage</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>bufferedImage</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>null</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>p</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ios</name>.
                                    <name>flush</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>writer</name>.
                                    <name>dispose</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>ios</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
