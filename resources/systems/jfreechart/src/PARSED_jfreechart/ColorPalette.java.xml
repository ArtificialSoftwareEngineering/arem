<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jfreechart\src\org\jfree\chart\plot\ColorPalette.java">
    <comment type="block">/* ===========================================================
        * JFreeChart : a free chart library for the Java(tm) platform
        * ===========================================================
        *
        * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
        *
        * Project Info: http://www.jfree.org/jfreechart/index.html
        *
        * This library is free software; you can redistribute it and/or modify it
        * under the terms of the GNU Lesser General Public License as published by
        * the Free Software Foundation; either version 2.1 of the License, or
        * (at your option) any later version.
        *
        * This library is distributed in the hope that it will be useful, but
        * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        * License for more details.
        *
        * You should have received a copy of the GNU Lesser General Public
        * License along with this library; if not, write to the Free Software
        * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        * USA.
        *
        * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
        * in the United States and other countries.]
        *
        * -----------------
        * ColorPalette.java
        * -----------------
        * (C) Copyright 2002-2007, by David M. O'Donnell and Contributors.
        *
        * Original Author: David M. O'Donnell;
        * Contributor(s): David Gilbert (for Object Refinery Limited);
        *
        * Changes
        * -------
        * 26-Nov-2002 : Version 1 contributed by David M. O'Donnell (DG);
        * 26-Mar-2003 : Implemented Serializable (DG);
        * 14-Aug-2003 : Implemented Cloneable (DG);
        * ------------- JFREECHART 1.0.x ---------------------------------------------
        * 31-Jan-2007 : Deprecated (DG);
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.
            <name>plot</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Color</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Paint</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Arrays</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.
            <name>ValueTick</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.
            <name>XYBlockRenderer</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Defines palette used by {@link ContourPlot}.
        *
        * @deprecated This class is no longer supported (as of version 1.0.4). If
        * you are creating contour plots, please try to use {@link XYPlot} and
        * {@link XYBlockRenderer}.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>ColorPalette</name>
        <super>
            <implements>implements <name>Cloneable</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** For serialization. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-9029901853079622051L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The min z-axis value. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>double</name>
                    </type>
                    <name>minZ</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The max z-axis value. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>double</name>
                    </type>
                    <name>maxZ</name> =
                    <init>
                        <expr>-1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Red components. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>r</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Green components. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>g</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Blue components. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>b</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Tick values are stored for use with stepped palette. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>double</name>
                        <index>[]</index>
                    </type>
                    <name>tickValues</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Logscale? */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>logscale</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Inverse palette (ie, min and max colors are reversed). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>inverse</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The palette name. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>String</name>
                    </type>
                    <name>paletteName</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Controls whether palette colors are stepped (not continuous). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <name>boolean</name>
                    </type>
                    <name>stepped</name> =
                    <init>
                        <expr>false</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Constant for converting loge to log10. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>double</name>
                    </type>
                    <name>log10</name> =
                    <init>
                        <expr>
                            <call>
                                <name><name>Math</name>.
                                    <name>log</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>10</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Default contructor.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ColorPalette</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the color associated with a value.
                *
                * @param value the value.
                *
                * @return The color.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Paint</name>
                </type>
                <name>getColor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>izV</name> =
                            <init>
                                <expr>
                                    <call>(<name>int</name>)
                                        <argument_list>(
                                            <argument>
                                                <expr>253 * (<name>value</name> -
                                                    <name><name>this</name>.
                                                        <name>minZ</name>
                                                    </name>
                                                    )
                                                    / (
                                                    <name><name>this</name>.
                                                        <name>maxZ</name>
                                                    </name>
                                                    -
                                                    <name><name>this</name>.
                                                        <name>minZ</name>
                                                    </name>
                                                    )
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    + 2
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Color</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>r</name>
                                                <index>[
                                                    <expr>
                                                        <name>izV</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>g</name>
                                                <index>[
                                                    <expr>
                                                        <name>izV</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>b</name>
                                                <index>[
                                                    <expr>
                                                        <name>izV</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a color.
                *
                * @param izV the index into the palette (zero based).
                *
                * @return The color.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Color</name>
                </type>
                <name>getColor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>izV</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>new
                            <call>
                                <name>Color</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>r</name>
                                                <index>[
                                                    <expr>
                                                        <name>izV</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>g</name>
                                                <index>[
                                                    <expr>
                                                        <name>izV</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>b</name>
                                                <index>[
                                                    <expr>
                                                        <name>izV</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns Color by mapping a given value to a linear palette.
                *
                * @param value the value.
                *
                * @return The color.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Color</name>
                </type>
                <name>getColorLinear</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>izV</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>stepped</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>index</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>Arrays</name>.
                                                        <name>binarySearch</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>this</name>.
                                                                    <name>tickValues</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name>value</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>index</name>
                                                    = -1 * <name>index</name> - 2
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>index</name>
                                            &lt; 0
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <comment type="line">// For the case were the first tick is greater
                                            </comment>
                                            <comment type="line">// than minZ</comment>
                                            <expr_stmt>
                                                <expr>
                                                    <name>value</name>
                                                    =
                                                    <name><name>this</name>.
                                                        <name>minZ</name>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                    <else>else
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <name>value</name>
                                                    =
                                                    <name><name>this</name>.
                                                        <name>tickValues</name>
                                                        <index>[
                                                            <expr>
                                                                <name>index</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </else>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>izV</name>
                            =
                            <call>(<name>int</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>253 * (<name>value</name> -
                                            <name><name>this</name>.
                                                <name>minZ</name>
                                            </name>
                                            ) / (
                                            <name><name>this</name>.
                                                <name>maxZ</name>
                                            </name>
                                            -
                                            <name><name>this</name>.
                                                <name>minZ</name>
                                            </name>
                                            )
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            + 2
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>izV</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>izV</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>255</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>izV</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>izV</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name>getColor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>izV</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns Color by mapping a given value to a common log palette.
                *
                * @param value the value.
                *
                * @return The color.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Color</name>
                </type>
                <name>getColorLog</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>izV</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>minZtmp</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>minZ</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>maxZtmp</name> =
                            <init>
                                <expr>
                                    <name><name>this</name>.
                                        <name>maxZ</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>minZ</name>
                                </name>
                                &lt;= 0.0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <comment type="line">// negatives = true;</comment>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>maxZ</name>
                                        </name>
                                        = <name>maxZtmp</name> - <name>minZtmp</name> + 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name><name>this</name>.
                                            <name>minZ</name>
                                        </name>
                                        = 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>value</name>
                                        = <name>value</name> - <name>minZtmp</name> + 1
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>minZlog</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>log</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>minZ</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    /
                                    <name>log10</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>maxZlog</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>log</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>this</name>.
                                                        <name>maxZ</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    /
                                    <name>log10</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>value</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>log</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>value</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            /
                            <name>log10</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// value = Math.pow(10,value);</comment>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>stepped</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>numSteps</name> =
                                        <init>
                                            <expr>
                                                <name><name>this</name>.<name>tickValues</name>.
                                                    <name>length</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>steps</name> =
                                        <init>
                                            <expr>256 / (<name>numSteps</name> - 1)
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <name>izV</name>
                                        = <name>steps</name> *
                                        <call>(<name>int</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>numSteps</name>
                                                        * (<name>value</name> - <name>minZlog</name>)
                                                        / (<name>maxZlog</name> - <name>minZlog</name>)
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        + 2
                                    </expr>
                                    ;
                                </expr_stmt>
                                <comment type="line">// izV = steps*numSteps*(int)((value/minZ)/(maxZlog-minZlog)) +
                                    2;
                                </comment>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <name>izV</name>
                                        =
                                        <call>(<name>int</name>)
                                            <argument_list>(
                                                <argument>
                                                    <expr>253 * (<name>value</name> - <name>minZlog</name>) / (<name>
                                                        maxZlog
                                                    </name> - <name>minZlog</name>)
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                        + 2
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </else>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name>izV</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>min</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>izV</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>255</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>izV</name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>max</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>izV</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>2</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>minZ</name>
                            </name>
                            =
                            <name>minZtmp</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>maxZ</name>
                            </name>
                            =
                            <name>maxZtmp</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <call>
                                <name>getColor</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>izV</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the maximum Z value.
                *
                * @return The value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>getMaxZ</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>maxZ</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the minimum Z value.
                *
                * @return The value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                </type>
                <name>getMinZ</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>minZ</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns Paint by mapping a given value to a either a linear or common
                * log palette as controlled by the value logscale.
                *
                * @param value the value.
                *
                * @return The paint.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Paint</name>
                </type>
                <name>getPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>isLogscale</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getColorLog</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                        <else>else
                            <block>{
                                <return>return
                                    <expr>
                                        <call>
                                            <name>getColorLinear</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>value</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </else>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the palette name.
                *
                * @return The palette name.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getPaletteName</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>paletteName</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the tick values.
                *
                * @return The tick values.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>getTickValues</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>tickValues</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Called to initialize the palette's color indexes
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <specifier>abstract</specifier>
                    <name>void</name>
                </type>
                <name>initialize</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Inverts Palette
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>invertPalette</name>
                <parameter_list>()</parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>red</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[<expr>256</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>green</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[<expr>256</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                                <index>[]</index>
                            </type>
                            <name>blue</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>int</name>
                                        <index>[<expr>256</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt; 256
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>red</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name><name>this</name>.
                                        <name>r</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>green</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name><name>this</name>.
                                        <name>g</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>
                                        <name>blue</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name><name>this</name>.
                                        <name>b</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>

                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>2</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt; 256
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>r</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>red</name>
                                        <index>[
                                            <expr>257 -
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>g</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>green</name>
                                        <index>[
                                            <expr>257 -
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>b</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    =
                                    <name>
                                        <name>blue</name>
                                        <index>[
                                            <expr>257 -
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the inverse flag.
                *
                * @return The flag.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isInverse</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>inverse</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the log-scale flag.
                *
                * @return The flag.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isLogscale</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>logscale</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the 'is-stepped' flag.
                *
                * @return The flag.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isStepped</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>stepped</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the inverse flag.
                *
                * @param inverse the new value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setInverse</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>inverse</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>inverse</name>
                            </name>
                            =
                            <name>inverse</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>initialize</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>inverse</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name>invertPalette</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return;</return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the 'log-scale' flag.
                *
                * @param logscale the new value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLogscale</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>logscale</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>logscale</name>
                            </name>
                            =
                            <name>logscale</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the maximum Z value.
                *
                * @param newMaxZ the new value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMaxZ</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>newMaxZ</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>maxZ</name>
                            </name>
                            =
                            <name>newMaxZ</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the minimum Z value.
                *
                * @param newMinZ the new value.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setMinZ</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>newMinZ</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>minZ</name>
                            </name>
                            =
                            <name>newMinZ</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the palette name.
                *
                * @param paletteName the name.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPaletteName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>paletteName</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <comment type="line">//String oldValue = this.paletteName;</comment>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>paletteName</name>
                            </name>
                            =
                            <name>paletteName</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return;</return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the stepped flag.
                *
                * @param stepped the flag.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStepped</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>stepped</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stepped</name>
                            </name>
                            =
                            <name>stepped</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return;</return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the tick values.
                *
                * @param newTickValues the tick values.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTickValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>newTickValues</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>tickValues</name>
                            </name>
                            =
                            <name>newTickValues</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Store ticks. Required when doing stepped axis
                *
                * @param ticks the ticks.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setTickValues</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name><name>java</name>.<name>util</name>.
                                    <name>List</name>
                                </name>
                            </type>
                            <name>ticks</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>tickValues</name>
                            </name>
                            = new
                            <name>
                                <name>double</name>
                                <index>[
                                    <expr>
                                        <call>
                                            <name><name>ticks</name>.
                                                <name>size</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ]
                                </index>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>this</name>.<name>tickValues</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>tickValues</name>
                                        <index>[
                                            <expr>
                                                <name>i</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                    = ((<name>ValueTick</name>)
                                    <call>
                                        <name><name>ticks</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    ).
                                    <call>
                                        <name>getValue</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Tests an object for equality with this instance.
                *
                * @param o the object to test.
                *
                * @return A boolean.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>o</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>this</name>
                                ==
                                <name>o</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!(<name>o</name>
                                <name>instanceof</name>
                                <name>ColorPalette</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ColorPalette</name>
                            </type>
                            <name>colorPalette</name> =
                            <init>
                                <expr>(<name>ColorPalette</name>)
                                    <name>o</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>inverse</name>
                                </name>
                                !=
                                <name><name>colorPalette</name>.
                                    <name>inverse</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>logscale</name>
                                </name>
                                !=
                                <name><name>colorPalette</name>.
                                    <name>logscale</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>maxZ</name>
                                </name>
                                !=
                                <name><name>colorPalette</name>.
                                    <name>maxZ</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>minZ</name>
                                </name>
                                !=
                                <name><name>colorPalette</name>.
                                    <name>minZ</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>stepped</name>
                                </name>
                                !=
                                <name><name>colorPalette</name>.
                                    <name>stepped</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>Arrays</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>b</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>colorPalette</name>.
                                                    <name>b</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>Arrays</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>g</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>colorPalette</name>.
                                                    <name>g</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>paletteName</name>
                                </name>
                                !=
                                <name>null</name>
                                ? !
                                <call>
                                    <name><name>this</name>.<name>paletteName</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>colorPalette</name>.
                                                    <name>paletteName</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                                :
                                <name><name>colorPalette</name>.
                                    <name>paletteName</name>
                                </name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>Arrays</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>r</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>colorPalette</name>.
                                                    <name>r</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>Arrays</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>tickValues</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>colorPalette</name>.
                                                    <name>tickValues</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>

                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a hash code.
                *
                * @return A hash code.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>result</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>temp</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>temp</name>
                            =
                            <call>
                                <name><name>Double</name>.
                                    <name>doubleToLongBits</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>minZ</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            =
                            <call>(<name>int</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>temp</name>
                                            ^ (<name>temp</name> &gt;&gt;&gt; 32)
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>temp</name>
                            =
                            <call>
                                <name><name>Double</name>.
                                    <name>doubleToLongBits</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>maxZ</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 29 * <name>result</name> +
                            <call>(<name>int</name>)
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>temp</name>
                                            ^ (<name>temp</name> &gt;&gt;&gt; 32)
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 29 * <name>result</name> + (
                            <name><name>this</name>.
                                <name>logscale</name>
                            </name>
                            ? 1 : 0)
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 29 * <name>result</name> + (
                            <name><name>this</name>.
                                <name>inverse</name>
                            </name>
                            ? 1 : 0)
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 29 *
                            <name>result</name>
                            + (
                            <name><name>this</name>.
                                <name>paletteName</name>
                            </name>
                            != <name>null</name> ?
                            <call>
                                <name><name>this</name>.<name>paletteName</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            : 0)
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = 29 * <name>result</name> + (
                            <name><name>this</name>.
                                <name>stepped</name>
                            </name>
                            ? 1 : 0)
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a clone of the palette.
                *
                * @return A clone.
                *
                * @throws CloneNotSupportedException never.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CloneNotSupportedException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ColorPalette</name>
                            </type>
                            <name>clone</name> =
                            <init>
                                <expr>(<name>ColorPalette</name>)
                                    <call>
                                        <name><name>super</name>.
                                            <name>clone</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <name>clone</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
