<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jfreechart\src\org\jfree\chart\encoders\ImageEncoder.java">
    <comment type="block">/* ===========================================================
        * JFreeChart : a free chart library for the Java(tm) platform
        * ===========================================================
        *
        * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
        *
        * Project Info: http://www.jfree.org/jfreechart/index.html
        *
        * This library is free software; you can redistribute it and/or modify it
        * under the terms of the GNU Lesser General Public License as published by
        * the Free Software Foundation; either version 2.1 of the License, or
        * (at your option) any later version.
        *
        * This library is distributed in the hope that it will be useful, but
        * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        * License for more details.
        *
        * You should have received a copy of the GNU Lesser General Public
        * License along with this library; if not, write to the Free Software
        * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        * USA.
        *
        * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
        * in the United States and other countries.]
        *
        * -----------------
        * ImageEncoder.java
        * -----------------
        * (C) Copyright 2004-2007, by Richard Atkinson and Contributors.
        *
        * Original Author: Richard Atkinson;
        * Contributor(s): -;
        *
        * Changes
        * -------
        * 01-Aug-2004 : Initial version (RA);
        * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.
            <name>encoders</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>BufferedImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Interface for abstracting different types of image encoders.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ImageEncoder</name>
        <block>{

            <comment type="javadoc">/**
                * Encodes an image in a particular format.
                *
                * @param bufferedImage The image to be encoded.
                *
                * @return The byte[] that is the encoded image.
                *
                * @throws IOException
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>bufferedImage</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>


            <comment type="javadoc">/**
                * Encodes an image in a particular format and writes it to an OutputStream.
                *
                * @param bufferedImage The image to be encoded.
                * @param outputStream The OutputStream to write the encoded image to.
                * @throws IOException
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>bufferedImage</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Get the quality of the image encoding.
                *
                * @return A float representing the quality.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>getQuality</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the quality of the image encoding (not supported by all
                * ImageEncoders).
                *
                * @param quality A float representing the quality.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setQuality</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>quality</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Get whether the encoder should encode alpha transparency.
                *
                * @return Whether the encoder is encoding alpha transparency.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>isEncodingAlpha</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set whether the encoder should encode alpha transparency (not
                * supported by all ImageEncoders).
                *
                * @param encodingAlpha Whether the encoder should encode alpha
                * transparency.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setEncodingAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>encodingAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
