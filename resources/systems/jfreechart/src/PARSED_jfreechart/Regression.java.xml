<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jfreechart\src\org\jfree\data\statistics\Regression.java">
    <comment type="block">/* ===========================================================
        * JFreeChart : a free chart library for the Java(tm) platform
        * ===========================================================
        *
        * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
        *
        * Project Info: http://www.jfree.org/jfreechart/index.html
        *
        * This library is free software; you can redistribute it and/or modify it
        * under the terms of the GNU Lesser General Public License as published by
        * the Free Software Foundation; either version 2.1 of the License, or
        * (at your option) any later version.
        *
        * This library is distributed in the hope that it will be useful, but
        * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        * License for more details.
        *
        * You should have received a copy of the GNU Lesser General Public
        * License along with this library; if not, write to the Free Software
        * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        * USA.
        *
        * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
        * in the United States and other countries.]
        *
        * ---------------
        * Regression.java
        * ---------------
        * (C) Copyright 2002-2007, by Object Refinery Limited.
        *
        * Original Author: David Gilbert (for Object Refinery Limited);
        * Contributor(s): -;
        *
        * Changes
        * -------
        * 30-Sep-2002 : Version 1 (DG);
        * 18-Aug-2003 : Added 'abstract' (DG);
        * 15-Jul-2004 : Switched getX() with getXValue() and getY() with
        * getYValue() (DG);
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jfree</name>.<name>data</name>.
            <name>statistics</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.
            <name>XYDataset</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A utility class for fitting regression curves to data.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>Regression</name>
        <block>{

            <comment type="javadoc">/**
                * Returns the parameters 'a' and 'b' for an equation y = a + bx, fitted to
                * the data using ordinary least squares regression. The result is
                * returned as a double[], where result[0] --&gt; a, and result[1] --&gt; b.
                *
                * @param data the data.
                *
                * @return The parameters.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>getOLSRegression</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <name><name>data</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Not enough data."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>x</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[<expr>0</expr>]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>y</name> =
                                    <init>
                                        <expr>
                                            <name>
                                                <name>data</name>
                                                <index>[
                                                    <expr>
                                                        <name>i</name>
                                                    </expr>
                                                    ]
                                                </index>
                                                <index>[<expr>1</expr>]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumX</name>
                                    +=
                                    <name>x</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumY</name>
                                    +=
                                    <name>y</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xx</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>x</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXX</name>
                                    +=
                                    <name>xx</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xy</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>y</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXY</name>
                                    +=
                                    <name>xy</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxx</name> =
                            <init>
                                <expr>
                                    <name>sumXX</name>
                                    - (<name>sumX</name> * <name>sumX</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxy</name> =
                            <init>
                                <expr>
                                    <name>sumXY</name>
                                    - (<name>sumX</name> * <name>sumY</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xbar</name> =
                            <init>
                                <expr>
                                    <name>sumX</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>ybar</name> =
                            <init>
                                <expr>
                                    <name>sumY</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[<expr>2</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                            = <name>sxy</name> /
                            <name>sxx</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            = <name>ybar</name> -
                            <name>
                                <name>result</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                            *
                            <name>xbar</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the parameters 'a' and 'b' for an equation y = a + bx, fitted to
                * the data using ordinary least squares regression. The result is returned
                * as a double[], where result[0] --&gt; a, and result[1] --&gt; b.
                *
                * @param data the data.
                * @param series the series (zero-based index).
                *
                * @return The parameters.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>getOLSRegression</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XYDataset</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>series</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>data</name>.
                                            <name>getItemCount</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>series</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Not enough data."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>x</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>data</name>.
                                                    <name>getXValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>series</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>y</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>data</name>.
                                                    <name>getYValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>series</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>i</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumX</name>
                                    +=
                                    <name>x</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumY</name>
                                    +=
                                    <name>y</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xx</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>x</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXX</name>
                                    +=
                                    <name>xx</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xy</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>y</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXY</name>
                                    +=
                                    <name>xy</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxx</name> =
                            <init>
                                <expr>
                                    <name>sumXX</name>
                                    - (<name>sumX</name> * <name>sumX</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxy</name> =
                            <init>
                                <expr>
                                    <name>sumXY</name>
                                    - (<name>sumX</name> * <name>sumY</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xbar</name> =
                            <init>
                                <expr>
                                    <name>sumX</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>ybar</name> =
                            <init>
                                <expr>
                                    <name>sumY</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[<expr>2</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                            = <name>sxy</name> /
                            <name>sxx</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            = <name>ybar</name> -
                            <name>
                                <name>result</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                            *
                            <name>xbar</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to
                * the data using a power regression equation. The result is returned as
                * an array, where double[0] --&gt; a, and double[1] --&gt; b.
                *
                * @param data the data.
                *
                * @return The parameters.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>getPowerRegression</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>double</name>
                                    <index>[]</index>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <name><name>data</name>.
                                        <name>length</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Not enough data."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>x</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>data</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                                <index>[<expr>0</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>y</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>
                                                                <name>data</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>i</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                                <index>[<expr>1</expr>]
                                                                </index>
                                                            </name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumX</name>
                                    +=
                                    <name>x</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumY</name>
                                    +=
                                    <name>y</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xx</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>x</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXX</name>
                                    +=
                                    <name>xx</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xy</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>y</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXY</name>
                                    +=
                                    <name>xy</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxx</name> =
                            <init>
                                <expr>
                                    <name>sumXX</name>
                                    - (<name>sumX</name> * <name>sumX</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxy</name> =
                            <init>
                                <expr>
                                    <name>sumXY</name>
                                    - (<name>sumX</name> * <name>sumY</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xbar</name> =
                            <init>
                                <expr>
                                    <name>sumX</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>ybar</name> =
                            <init>
                                <expr>
                                    <name>sumY</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[<expr>2</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                            = <name>sxy</name> /
                            <name>sxx</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>pow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>exp</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>1.0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ybar</name>
                                            -
                                            <name>
                                                <name>result</name>
                                                <index>[<expr>1</expr>]
                                                </index>
                                            </name>
                                            *
                                            <name>xbar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to
                * the data using a power regression equation. The result is returned as
                * an array, where double[0] --&gt; a, and double[1] --&gt; b.
                *
                * @param data the data.
                * @param series the series to fit the regression line against.
                *
                * @return The parameters.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>double</name>
                    <index>[]</index>
                </type>
                <name>getPowerRegression</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XYDataset</name>
                            </type>
                            <name>data</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>series</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>n</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>data</name>.
                                            <name>getItemCount</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>series</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>n</name>
                                &lt; 2
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Not enough data."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXX</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sumXY</name> =
                            <init>
                                <expr>0</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name>n</name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>x</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>data</name>.
                                                                    <name>getXValue</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>series</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>y</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>log</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>data</name>.
                                                                    <name>getYValue</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>series</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>i</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumX</name>
                                    +=
                                    <name>x</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumY</name>
                                    +=
                                    <name>y</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xx</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>x</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXX</name>
                                    +=
                                    <name>xx</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>double</name>
                                    </type>
                                    <name>xy</name> =
                                    <init>
                                        <expr>
                                            <name>x</name>
                                            *
                                            <name>y</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sumXY</name>
                                    +=
                                    <name>xy</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </for>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxx</name> =
                            <init>
                                <expr>
                                    <name>sumXX</name>
                                    - (<name>sumX</name> * <name>sumX</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>sxy</name> =
                            <init>
                                <expr>
                                    <name>sumXY</name>
                                    - (<name>sumX</name> * <name>sumY</name>) /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>xbar</name> =
                            <init>
                                <expr>
                                    <name>sumX</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                            </type>
                            <name>ybar</name> =
                            <init>
                                <expr>
                                    <name>sumY</name>
                                    /
                                    <name>n</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>double</name>
                                <index>[]</index>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>double</name>
                                        <index>[<expr>2</expr>]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>1</expr>]
                                </index>
                            </name>
                            = <name>sxy</name> /
                            <name>sxx</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>
                                <name>result</name>
                                <index>[<expr>0</expr>]
                                </index>
                            </name>
                            =
                            <call>
                                <name><name>Math</name>.
                                    <name>pow</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>Math</name>.
                                                    <name>exp</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>1.0</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>ybar</name>
                                            -
                                            <name>
                                                <name>result</name>
                                                <index>[<expr>1</expr>]
                                                </index>
                                            </name>
                                            *
                                            <name>xbar</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>

                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
