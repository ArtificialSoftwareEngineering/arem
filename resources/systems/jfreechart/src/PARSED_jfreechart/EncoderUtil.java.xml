<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jfreechart\src\org\jfree\chart\encoders\EncoderUtil.java">
    <comment type="block">/* ===========================================================
        * JFreeChart : a free chart library for the Java(tm) platform
        * ===========================================================
        *
        * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
        *
        * Project Info: http://www.jfree.org/jfreechart/index.html
        *
        * This library is free software; you can redistribute it and/or modify it
        * under the terms of the GNU Lesser General Public License as published by
        * the Free Software Foundation; either version 2.1 of the License, or
        * (at your option) any later version.
        *
        * This library is distributed in the hope that it will be useful, but
        * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        * License for more details.
        *
        * You should have received a copy of the GNU Lesser General Public
        * License along with this library; if not, write to the Free Software
        * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        * USA.
        *
        * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
        * in the United States and other countries.]
        *
        * ----------------
        * EncoderUtil.java
        * ----------------
        * (C) Copyright 2004-2007, by Richard Atkinson and Contributors.
        *
        * Original Author: Richard Atkinson;
        * Contributor(s): -;
        *
        * Changes
        * -------
        * 01-Aug-2004 : Initial version (RA);
        * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.
            <name>encoders</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.<name>image</name>.
            <name>BufferedImage</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>OutputStream</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A collection of utility methods for encoding images and returning them as a
        * byte[] or writing them directly to an OutputStream.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>EncoderUtil</name>
        <block>{

            <comment type="javadoc">/**
                * Encode the image in a specific format.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                *
                * @return The byte[] that is the encoded image.
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param encodeAlpha Whether to encode alpha transparency (not supported
                * by all ImageEncoders).
                * @return The byte[] that is the encoded image.
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>encodeAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>encodeAlpha</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param quality The quality to use for the image encoding (not supported
                * by all ImageEncoders).
                * @return The byte[] that is the encoded image.
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>quality</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>quality</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param quality The quality to use for the image encoding (not supported
                * by all ImageEncoders).
                * @param encodeAlpha Whether to encode alpha transparency (not supported
                * by all ImageEncoders).
                * @return The byte[] that is the encoded image.
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>byte</name>
                    <index>[]</index>
                </type>
                <name>encode</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>quality</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>encodeAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>quality</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>encodeAlpha</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format and write it to an OutputStream.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param outputStream The OutputStream to write the encoded image to.
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeBufferedImage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format and write it to an OutputStream.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param outputStream The OutputStream to write the encoded image to.
                * @param quality The quality to use for the image encoding (not
                * supported by all ImageEncoders).
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeBufferedImage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>quality</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>quality</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format and write it to an OutputStream.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param outputStream The OutputStream to write the encoded image to.
                * @param encodeAlpha Whether to encode alpha transparency (not
                * supported by all ImageEncoders).
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeBufferedImage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>encodeAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>encodeAlpha</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Encode the image in a specific format and write it to an OutputStream.
                *
                * @param image The image to be encoded.
                * @param format The {@link ImageFormat} to use.
                * @param outputStream The OutputStream to write the encoded image to.
                * @param quality The quality to use for the image encoding (not
                * supported by all ImageEncoders).
                * @param encodeAlpha Whether to encode alpha transparency (not supported
                * by all ImageEncoders).
                * @throws IOException
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>writeBufferedImage</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>BufferedImage</name>
                            </type>
                            <name>image</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>format</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>OutputStream</name>
                            </type>
                            <name>outputStream</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>quality</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>encodeAlpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ImageEncoder</name>
                            </type>
                            <name>imageEncoder</name>
                            =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ImageEncoderFactory</name>.
                                            <name>newInstance</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>format</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>quality</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>encodeAlpha</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>imageEncoder</name>.
                                    <name>encode</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>image</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>outputStream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
