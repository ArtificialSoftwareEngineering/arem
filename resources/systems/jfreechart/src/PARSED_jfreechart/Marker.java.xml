<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\jfreechart\src\org\jfree\chart\plot\Marker.java">
    <comment type="block">/* ===========================================================
        * JFreeChart : a free chart library for the Java(tm) platform
        * ===========================================================
        *
        * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
        *
        * Project Info: http://www.jfree.org/jfreechart/index.html
        *
        * This library is free software; you can redistribute it and/or modify it
        * under the terms of the GNU Lesser General Public License as published by
        * the Free Software Foundation; either version 2.1 of the License, or
        * (at your option) any later version.
        *
        * This library is distributed in the hope that it will be useful, but
        * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
        * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
        * License for more details.
        *
        * You should have received a copy of the GNU Lesser General Public
        * License along with this library; if not, write to the Free Software
        * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        * USA.
        *
        * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
        * in the United States and other countries.]
        *
        * -----------
        * Marker.java
        * -----------
        * (C) Copyright 2002-2007, by Object Refinery Limited.
        *
        * Original Author: David Gilbert (for Object Refinery Limited);
        * Contributor(s): Nicolas Brodu;
        *
        * Changes
        * -------
        * 02-Jul-2002 : Added extra constructor, standard header and Javadoc
        * comments (DG);
        * 20-Aug-2002 : Added the outline stroke attribute (DG);
        * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
        * 16-Oct-2002 : Added new constructor (DG);
        * 26-Mar-2003 : Implemented Serializable (DG);
        * 21-May-2003 : Added labels (DG);
        * 11-Sep-2003 : Implemented Cloneable (NB);
        * 05-Nov-2003 : Added checks to ensure some attributes are never null (DG);
        * 11-Feb-2003 : Moved to org.jfree.chart.plot package, plus significant API
        * changes to support IntervalMarker in plots (DG);
        * 14-Jun-2004 : Updated equals() method (DG);
        * 21-Jan-2005 : Added settings to control direction of horizontal and
        * vertical label offsets (DG);
        * 01-Jun-2005 : Modified to use only one label offset type - this will be
        * applied to the domain or range axis as appropriate (DG);
        * 06-Jun-2005 : Fix equals() method to handle GradientPaint (DG);
        * 19-Aug-2005 : Changed constructor from public --&gt; protected (DG);
        * ------------- JFREECHART 1.0.x ---------------------------------------------
        * 05-Sep-2006 : Added MarkerChangeListener support (DG);
        * 26-Sep-2007 : Fix for serialization bug 1802195 (DG);
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.
            <name>plot</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>BasicStroke</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Color</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Font</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Paint</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>awt</name>.
            <name>Stroke</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>Serializable</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>EventListener</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>swing</name>.<name>event</name>.
            <name>EventListenerList</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.
            <name>MarkerChangeEvent</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.
            <name>MarkerChangeListener</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>io</name>.
            <name>SerialUtilities</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>ui</name>.
            <name>LengthAdjustmentType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>ui</name>.
            <name>RectangleAnchor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>ui</name>.
            <name>RectangleInsets</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>ui</name>.
            <name>TextAnchor</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>util</name>.
            <name>ObjectUtilities</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>jfree</name>.<name>util</name>.
            <name>PaintUtilities</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The base class for markers that can be added to plots to highlight a value
        * or range of values.
        * &lt;br&gt;&lt;br&gt;
        * An event notification mechanism was added to this class in JFreeChart
        * version 1.0.3.
        */
    </comment>
    <class>
        <specifier>public</specifier>
        <specifier>abstract</specifier> class <name>Marker</name>
        <super>
            <implements>implements <name>Cloneable</name>,
                <name>Serializable</name>
            </implements>
        </super>
        <block>{

            <comment type="javadoc">/** For serialization. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-734389651405327166L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The paint (null is not allowed). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>Paint</name>
                    </type>
                    <name>paint</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The stroke (null is not allowed). */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>Stroke</name>
                    </type>
                    <name>stroke</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The outline paint. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>Paint</name>
                    </type>
                    <name>outlinePaint</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The outline stroke. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>Stroke</name>
                    </type>
                    <name>outlineStroke</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The alpha transparency. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>float</name>
                    </type>
                    <name>alpha</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The label. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>label</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The label font. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>Font</name>
                    </type>
                    <name>labelFont</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The label paint. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>Paint</name>
                    </type>
                    <name>labelPaint</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The label position. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>RectangleAnchor</name>
                    </type>
                    <name>labelAnchor</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The text anchor for the label. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>TextAnchor</name>
                    </type>
                    <name>labelTextAnchor</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** The label offset from the marker rectangle. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>RectangleInsets</name>
                    </type>
                    <name>labelOffset</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The offset type for the domain or range axis (never &lt;code&gt;null&lt;/code&gt;).
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>LengthAdjustmentType</name>
                    </type>
                    <name>labelOffsetType</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/** Storage for registered change listeners. */</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>transient</name>
                        <name>EventListenerList</name>
                    </type>
                    <name>listenerList</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Creates a new marker with default attributes.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Marker</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Color</name>.
                                                <name>gray</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a new marker.
                *
                * @param paint the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Marker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Paint</name>
                            </type>
                            <name>paint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>paint</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>BasicStroke</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0.5f</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Color</name>.
                                                <name>gray</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>BasicStroke</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>0.5f</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>0.80f</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Constructs a new marker.
                *
                * @param paint the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
                * @param stroke the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
                * @param outlinePaint the outline paint (&lt;code&gt;null&lt;/code&gt; permitted).
                * @param outlineStroke the outline stroke (&lt;code&gt;null&lt;/code&gt; permitted).
                * @param alpha the alpha transparency (must be in the range 0.0f to
                * 1.0f).
                *
                * @throws IllegalArgumentException if &lt;code&gt;paint&lt;/code&gt; or
                * &lt;code&gt;stroke&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, or &lt;code&gt;alpha&lt;/code&gt; is
                * not in the specified range.
                */
            </comment>
            <constructor>
                <specifier>protected</specifier>
                <name>Marker</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Paint</name>
                            </type>
                            <name>paint</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Stroke</name>
                            </type>
                            <name>stroke</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Paint</name>
                            </type>
                            <name>outlinePaint</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>Stroke</name>
                            </type>
                            <name>outlineStroke</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>alpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <if>if
                        <condition>(
                            <expr>
                                <name>paint</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'paint' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>stroke</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'stroke' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>alpha</name>
                                &lt; 0.0f || <name>alpha</name> &gt; 1.0f
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalArgumentException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"The 'alpha' value must be in the range 0.0f to 1.0f"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>paint</name>
                            </name>
                            =
                            <name>paint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stroke</name>
                            </name>
                            =
                            <name>stroke</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outlinePaint</name>
                            </name>
                            =
                            <name>outlinePaint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outlineStroke</name>
                            </name>
                            =
                            <name>outlineStroke</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>alpha</name>
                            </name>
                            =
                            <name>alpha</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelFont</name>
                            </name>
                            = new
                            <call>
                                <name>Font</name>
                                <argument_list>(
                                    <argument>
                                        <expr>"SansSerif"</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name><name>Font</name>.
                                                <name>PLAIN</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>9</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelPaint</name>
                            </name>
                            =
                            <name><name>Color</name>.
                                <name>black</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelAnchor</name>
                            </name>
                            =
                            <name><name>RectangleAnchor</name>.
                                <name>TOP_LEFT</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelOffset</name>
                            </name>
                            = new
                            <call>
                                <name>RectangleInsets</name>
                                <argument_list>(
                                    <argument>
                                        <expr>3.0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>3.0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>3.0</expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>3.0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelOffsetType</name>
                            </name>
                            =
                            <name><name>LengthAdjustmentType</name>.
                                <name>CONTRACT</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelTextAnchor</name>
                            </name>
                            =
                            <name><name>TextAnchor</name>.
                                <name>CENTER</name>
                            </name>
                        </expr>
                        ;
                    </expr_stmt>

                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>listenerList</name>
                            </name>
                            = new
                            <call>
                                <name>EventListenerList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Returns the paint.
                *
                * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setPaint(Paint)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Paint</name>
                </type>
                <name>getPaint</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>paint</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the paint and sends a {@link MarkerChangeEvent} to all registered
                * listeners.
                *
                * @param paint the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getPaint()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Paint</name>
                            </type>
                            <name>paint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>paint</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'paint' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>paint</name>
                            </name>
                            =
                            <name>paint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the stroke.
                *
                * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setStroke(Stroke)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Stroke</name>
                </type>
                <name>getStroke</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>stroke</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the stroke and sends a {@link MarkerChangeEvent} to all registered
                * listeners.
                *
                * @param stroke the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getStroke()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setStroke</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Stroke</name>
                            </type>
                            <name>stroke</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>stroke</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'stroke' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stroke</name>
                            </name>
                            =
                            <name>stroke</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the outline paint.
                *
                * @return The outline paint (possibly &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setOutlinePaint(Paint)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Paint</name>
                </type>
                <name>getOutlinePaint</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>outlinePaint</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the outline paint and sends a {@link MarkerChangeEvent} to all
                * registered listeners.
                *
                * @param paint the paint (&lt;code&gt;null&lt;/code&gt; permitted).
                *
                * @see #getOutlinePaint()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutlinePaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Paint</name>
                            </type>
                            <name>paint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outlinePaint</name>
                            </name>
                            =
                            <name>paint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the outline stroke.
                *
                * @return The outline stroke (possibly &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setOutlineStroke(Stroke)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Stroke</name>
                </type>
                <name>getOutlineStroke</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>outlineStroke</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the outline stroke and sends a {@link MarkerChangeEvent} to all
                * registered listeners.
                *
                * @param stroke the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
                *
                * @see #getOutlineStroke()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setOutlineStroke</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Stroke</name>
                            </type>
                            <name>stroke</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outlineStroke</name>
                            </name>
                            =
                            <name>stroke</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the alpha transparency.
                *
                * @return The alpha transparency.
                *
                * @see #setAlpha(float)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>float</name>
                </type>
                <name>getAlpha</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>alpha</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the alpha transparency that should be used when drawing the
                * marker, and sends a {@link MarkerChangeEvent} to all registered
                * listeners. The alpha transparency is a value in the range 0.0f
                * (completely transparent) to 1.0f (completely opaque).
                *
                * @param alpha the alpha transparency (must be in the range 0.0f to
                * 1.0f).
                *
                * @throws IllegalArgumentException if &lt;code&gt;alpha&lt;/code&gt; is not in the
                * specified range.
                *
                * @see #getAlpha()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setAlpha</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>float</name>
                            </type>
                            <name>alpha</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>alpha</name>
                                &lt; 0.0f || <name>alpha</name> &gt; 1.0f
                            </expr>
                            )
                        </condition>
                        <then>
                            <throw>throw
                                <expr>new
                                    <call>
                                        <name>IllegalArgumentException</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>"The 'alpha' value must be in the range 0.0f to 1.0f"</expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </throw>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>alpha</name>
                            </name>
                            =
                            <name>alpha</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label (if &lt;code&gt;null&lt;/code&gt; no label is displayed).
                *
                * @return The label (possibly &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setLabel(String)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getLabel</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>label</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label (if &lt;code&gt;null&lt;/code&gt; no label is displayed) and sends a
                * {@link MarkerChangeEvent} to all registered listeners.
                *
                * @param label the label (&lt;code&gt;null&lt;/code&gt; permitted).
                *
                * @see #getLabel()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabel</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>label</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>label</name>
                            </name>
                            =
                            <name>label</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label font.
                *
                * @return The label font (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setLabelFont(Font)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Font</name>
                </type>
                <name>getLabelFont</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>labelFont</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label font and sends a {@link MarkerChangeEvent} to all
                * registered listeners.
                *
                * @param font the font (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getLabelFont()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabelFont</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Font</name>
                            </type>
                            <name>font</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>font</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'font' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelFont</name>
                            </name>
                            =
                            <name>font</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label paint.
                *
                * @return The label paint (never &lt;/code&gt;null&lt;/code&gt;).
                *
                * @see #setLabelPaint(Paint)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Paint</name>
                </type>
                <name>getLabelPaint</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>labelPaint</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label paint and sends a {@link MarkerChangeEvent} to all
                * registered listeners.
                *
                * @param paint the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getLabelPaint()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabelPaint</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Paint</name>
                            </type>
                            <name>paint</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>paint</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'paint' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelPaint</name>
                            </name>
                            =
                            <name>paint</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label anchor. This defines the position of the label
                * anchor, relative to the bounds of the marker.
                *
                * @return The label anchor (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setLabelAnchor(RectangleAnchor)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>RectangleAnchor</name>
                </type>
                <name>getLabelAnchor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>labelAnchor</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label anchor and sends a {@link MarkerChangeEvent} to all
                * registered listeners. The anchor defines the position of the label
                * anchor, relative to the bounds of the marker.
                *
                * @param anchor the anchor (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getLabelAnchor()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabelAnchor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>RectangleAnchor</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>anchor</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'anchor' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelAnchor</name>
                            </name>
                            =
                            <name>anchor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label offset.
                *
                * @return The label offset (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setLabelOffset(RectangleInsets)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>RectangleInsets</name>
                </type>
                <name>getLabelOffset</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>labelOffset</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label offset and sends a {@link MarkerChangeEvent} to all
                * registered listeners.
                *
                * @param offset the label offset (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getLabelOffset()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabelOffset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>RectangleInsets</name>
                            </type>
                            <name>offset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>offset</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'offset' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelOffset</name>
                            </name>
                            =
                            <name>offset</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label offset type.
                *
                * @return The type (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setLabelOffsetType(LengthAdjustmentType)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>LengthAdjustmentType</name>
                </type>
                <name>getLabelOffsetType</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>labelOffsetType</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label offset type and sends a {@link MarkerChangeEvent} to all
                * registered listeners.
                *
                * @param adj the type (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getLabelOffsetType()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabelOffsetType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>LengthAdjustmentType</name>
                            </type>
                            <name>adj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>adj</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'adj' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelOffsetType</name>
                            </name>
                            =
                            <name>adj</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns the label text anchor.
                *
                * @return The label text anchor (never &lt;code&gt;null&lt;/code&gt;).
                *
                * @see #setLabelTextAnchor(TextAnchor)
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>TextAnchor</name>
                </type>
                <name>getLabelTextAnchor</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name><name>this</name>.
                                <name>labelTextAnchor</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Sets the label text anchor and sends a {@link MarkerChangeEvent} to
                * all registered listeners.
                *
                * @param anchor the label text anchor (&lt;code&gt;null&lt;/code&gt; not permitted).
                *
                * @see #getLabelTextAnchor()
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>setLabelTextAnchor</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>TextAnchor</name>
                            </type>
                            <name>anchor</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>anchor</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IllegalArgumentException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Null 'anchor' argument."</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelTextAnchor</name>
                            </name>
                            =
                            <name>anchor</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>notifyListeners</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>MarkerChangeEvent</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>this</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Registers an object for notification of changes to the marker.
                *
                * @param listener the object to be registered.
                *
                * @see #removeChangeListener(MarkerChangeListener)
                *
                * @since 1.0.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>addChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MarkerChangeListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.<name>listenerList</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>MarkerChangeListener</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>listener</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Unregisters an object for notification of changes to the marker.
                *
                * @param listener the object to be unregistered.
                *
                * @see #addChangeListener(MarkerChangeListener)
                *
                * @since 1.0.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>removeChangeListener</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MarkerChangeListener</name>
                            </type>
                            <name>listener</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>this</name>.<name>listenerList</name>.
                                    <name>remove</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>MarkerChangeListener</name>.
                                                <name>
                                                    <name/>
                                                </name>
                                            </name>
                                            class
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>listener</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Notifies all registered listeners that the marker has been modified.
                *
                * @param event information about the change event.
                *
                * @since 1.0.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>notifyListeners</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>MarkerChangeEvent</name>
                            </type>
                            <name>event</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Object</name>
                                <index>[]</index>
                            </type>
                            <name>listeners</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>this</name>.<name>listenerList</name>.
                                            <name>getListenerList</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>
                                        <name><name>listeners</name>.
                                            <name>length</name>
                                        </name>
                                        - 2
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &gt;= 0
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr>
                                <name>i</name>
                                -= 2
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>listeners</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        ==
                                        <name><name>MarkerChangeListener</name>.
                                            <name>
                                                <name/>
                                            </name>
                                        </name>
                                        class
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>((<name>MarkerChangeListener</name>)
                                                <name>
                                                    <name>listeners</name>
                                                    <index>[
                                                        <expr>
                                                            <name>i</name>
                                                            + 1
                                                        </expr>
                                                        ]
                                                    </index>
                                                </name>
                                                ).
                                                <call>
                                                    <name>markerChanged</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>event</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>

                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an array containing all the listeners of the specified type.
                *
                * @param listenerType the listener type.
                *
                * @return The array of listeners.
                *
                * @since 1.0.3
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>EventListener</name>
                    <index>[]</index>
                </type>
                <name>getListeners</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Class</name>
                            </type>
                            <name>listenerType</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>this</name>.<name>listenerList</name>.
                                    <name>getListeners</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>listenerType</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Tests the marker for equality with an arbitrary object.
                *
                * @param obj the object (&lt;code&gt;null&lt;/code&gt; permitted).
                *
                * @return A boolean.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>this</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>true</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!(<name>obj</name>
                                <name>instanceof</name>
                                <name>Marker</name>)
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Marker</name>
                            </type>
                            <name>that</name> =
                            <init>
                                <expr>(<name>Marker</name>)
                                    <name>obj</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>PaintUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>paint</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>paint</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>ObjectUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>stroke</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>stroke</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>PaintUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>outlinePaint</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>outlinePaint</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>ObjectUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>outlineStroke</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>outlineStroke</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>alpha</name>
                                </name>
                                !=
                                <name><name>that</name>.
                                    <name>alpha</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>ObjectUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>label</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>label</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>ObjectUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>labelFont</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>labelFont</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>PaintUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>labelPaint</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>labelPaint</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>labelAnchor</name>
                                </name>
                                !=
                                <name><name>that</name>.
                                    <name>labelAnchor</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name><name>this</name>.
                                    <name>labelTextAnchor</name>
                                </name>
                                !=
                                <name><name>that</name>.
                                    <name>labelTextAnchor</name>
                                </name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>ObjectUtilities</name>.
                                        <name>equal</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>this</name>.
                                                    <name>labelOffset</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        ,
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>labelOffset</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <call>
                                    <name><name>this</name>.<name>labelOffsetType</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name><name>that</name>.
                                                    <name>labelOffsetType</name>
                                                </name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return <expr>false</expr>;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Creates a clone of the marker.
                *
                * @return A clone.
                *
                * @throws CloneNotSupportedException never.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CloneNotSupportedException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Provides serialization support.
                *
                * @param stream the output stream.
                *
                * @throws IOException if there is an I/O error.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>writeObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>stream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>stream</name>.
                                    <name>defaultWriteObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>writePaint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>paint</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>writeStroke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>stroke</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>writePaint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>outlinePaint</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>writeStroke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>outlineStroke</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>writePaint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>this</name>.
                                                <name>labelPaint</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Provides serialization support.
                *
                * @param stream the input stream.
                *
                * @throws IOException if there is an I/O error.
                * @throws ClassNotFoundException if there is a classpath problem.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>readObject</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>stream</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ClassNotFoundException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>stream</name>.
                                    <name>defaultReadObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>paint</name>
                            </name>
                            =
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>readPaint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>stroke</name>
                            </name>
                            =
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>readStroke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outlinePaint</name>
                            </name>
                            =
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>readPaint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>outlineStroke</name>
                            </name>
                            =
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>readStroke</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>labelPaint</name>
                            </name>
                            =
                            <call>
                                <name><name>SerialUtilities</name>.
                                    <name>readPaint</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>stream</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>listenerList</name>
                            </name>
                            = new
                            <call>
                                <name>EventListenerList</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
